import groovy.json.JsonSlurper
import twitter4j.*
import twitter4j.auth.AccessToken

import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
        classpath "org.twitter4j:twitter4j-core:4.0.4"
        classpath "org.twitter4j:twitter4j-stream:4.0.4"
        classpath "org.twitter4j:twitter4j-async:4.0.4"
        classpath "org.twitter4j:twitter4j-media-support:4.0.4"
        classpath "org.twitter4j:twitter4j-httpclient-support:2.2.6"
    }
}

apply from: '../common-utils/data-clients.gradle'

ext {
    twitterFile = file("${buildDir}/twitter.json")

    getTwitterTweets = {
        new JsonSlurper().parse(twitterFile)
    }

    twitterDateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss ZZZZZ yyyy", Locale.ENGLISH);
    twitterDateFormat.setLenient(true);

    twitter = { Closure cl ->
        // The factory instance is re-useable and thread safe.
        Twitter client = TwitterFactory.getSingleton();
        client.setOAuthConsumer(latcraftTwitterConsumerKey, latcraftTwitterConsumerSecret)

        if (!latcraftTwitterOAuthToken || !latcraftTwitterOAuthSecret) {
            AccessToken accessToken = null;
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            while (null == accessToken) {
                def requestToken = client.getOAuthRequestToken()
                println("Open the following URL and grant access to your account:");
                println(requestToken.getAuthorizationURL());
                println("Press enter.");
                br.readLine()

                println("Enter the verify(if available) and hit enter.");
                println("Please ignore Gradle 'Building' text. Just type it.");
                println("[verify]:");
                String verify = br.readLine();
                try {
                    if (verify.length() > 0) {
                        accessToken = client.getOAuthAccessToken(requestToken, verify);
                    } else {
                        accessToken = client.getOAuthAccessToken();
                    }
                } catch (TwitterException te) {
                    if (401 == te.getStatusCode()) {
                        System.out.println("Unable to get the access token.");
                    } else {
                        te.printStackTrace();
                    }
                }
                client.verifyCredentials()
            }

            //persist to the accessToken for future reference.
            latcraftTwitterOAuthToken = accessToken.getToken()
            latcraftTwitterOAuthSecret = accessToken.getTokenSecret()
            println("//**********************************************")
            println("// Please update gradle.properties")
            println("// latcraftTwitterOAuthToken=${latcraftTwitterOAuthToken}")
            println("// latcraftTwitterOAuthSecret=${latcraftTwitterOAuthSecret}")
        }

        client.setOAuthAccessToken(new AccessToken(latcraftTwitterOAuthToken, latcraftTwitterOAuthSecret))

        try {
            cl(client)
        } catch (TwitterException e) {
            throw new GradleException("Error details: ${e.getErrorCode()} (HTTP ${e.getStatusCode()}) : ${e.getMessage()} (" +
                    "Access level: ${e.getAccessLevel()}, " +
                    "Network: ${e.isCausedByNetworkIssue()}" +
                    ")")
        }
    }
}

def getTwitterData() {
    buildDir.mkdirs()
    def result = []

    twitter { Twitter api ->
        def timeline = api.getUserTimeline(new Paging(1).count(latcraftTwitterPagingCount.toInteger()).sinceId(latcraftTwitterPagingSinceBigBangMomentId.toLong())
        )
        def data = timeline.toArray()
        twitterFile.text = dumpJson(data)
        result = data
    }

    return result
}

task getTwitterDataTask << {
    getTwitterData()
}

getTwitterDataTask.outputs.file twitterFile

//getTwitterDataTask.logging.captureStandardOutput LogLevel.INFO
//getTwitterDataTask.logging.captureStandardError LogLevel.INFO


task notifyTwitter(dependsOn: [getMasterData, getTwitterDataTask]) << {

    // TODO: get inforgraphics data
    def twitter_tweets = getTwitterTweets()
    def updated_events = getEvents().collect { event ->

        // Calculate unique event ID used to distinguish this event from others in various data sources.
        String eventId = event.tickets

        // Find EventBrite event ID if it is not yet set or missing.
        String tweetId = event.tweetId
        if (!tweetId) {
            twitter_tweets.find { tweet ->
                if (tweet.URLEntities.findAll { eventId && it.expandedURL == eventId}
                        && !tweet.retweeted
                        && !tweet.contributors) {
                    tweetId = tweet.id
                }
            }
        }

        if (tweetId) {
            println("Announcement tweet detected: Event = ${event.date} / ${event.theme} -> ${tweetId} (https://twitter.com/latcraft/status/${tweetId})")
            event.tweetId = tweetId
        } else if(isFutureEvent(event)){
            println("Publishing Future event: Event = ${event.date} / ${event.theme}")
            twitter { Twitter api ->
                def status = api.updateStatus(new StatusUpdate("OAUTH Test. Please Ignore. Will be deleted in matter of seconds.").media(new File("/home/leonids/Downloads/CmGtLojWgAAQMlv.jpg:large.jpeg")))
                tweetId = status.id
            }
            println("\t -> tweetId ${tweetId}")
            event.tweetId = tweetId
        } else {
            println("Skipping Past event: Event = ${event.date} / ${event.theme}")
        }

        event
    }

    eventFile.text = dumpJson(updated_events)
}

//notifyTwitter.logging.captureStandardOutput LogLevel.INFO
//notifyTwitter.logging.captureStandardError LogLevel.INFO

task twitterUpdateMasterData() << {
    println("twitterUpdateMasterData")
}
//task twitterUpdateMasterData(dependsOn: [updateMasterData])

twitterUpdateMasterData.mustRunAfter notifyTwitter

task build(dependsOn: [notifyTwitter, twitterUpdateMasterData])
