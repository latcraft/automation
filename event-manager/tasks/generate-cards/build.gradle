
import org.apache.batik.transcoder.image.PNGTranscoder
import org.apache.batik.transcoder.TranscoderInput
import org.apache.batik.transcoder.TranscoderOutput

import groovy.util.XmlSlurper
import groovy.xml.XmlUtil

import java.awt.image.BufferedImage
import java.awt.Graphics2D
import java.awt.Color

import static javax.imageio.ImageIO.*

import groovyx.net.http.*
import groovyx.net.http.Method
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*

import org.apache.commons.lang3.text.WordUtils

buildscript {
  repositories { mavenCentral() }
  dependencies {
    classpath('batik:batik-transcoder:1.6-1') {
      exclude module: 'fop'
    }
    classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
    classpath 'xerces:xercesImpl:2.11.0'
    classpath 'org.apache.commons:commons-lang3:3.4'
  }
}

apply from: '../common-utils/data-clients.gradle'

task generateEventCards(dependsOn: getMasterData) << {
  buildDir.mkdirs()
  ['normal_event_card_v1', 'normal_event_card_v2', 'workshop_event_card_v1', 'workshop_event_card_v2', 'workshop_facebook_background', 'normal_event_facebook_background'].each { templateId ->
    File svgTemplate = file("templates/${templateId}.svg")
    getFutureEvents().each { event ->

      String eventId = calculateEventId(event)
      logger.quiet "> Generating '${templateId}' for ${event.theme} (${eventId})"
      File svgFile = file("${buildDir}/${eventId}.svg")    
      svgFile.text = replaceTextInSVG(
        svgTemplate.text, 
        [
          'event-title':    event.'short-theme' ?: event.theme,
          'event-time':     event.time,
          'event-date':     event.date,
          'event-location': event.venue,
        ]
      )
      renderImage(
        svgFile, 
        file("${buildDir}/${templateId}"), 
        eventId
      )
      svgFile.delete()

    }
  }
}

generateEventCards.logging.captureStandardOutput LogLevel.INFO
generateEventCards.logging.captureStandardError LogLevel.INFO
generateEventCards.outputs.dir file("${buildDir}")


task generateSpeakerCards(dependsOn: getMasterData) << {
  buildDir.mkdirs()
  ['speaker_card_v1'].each { templateId ->
    File svgTemplate = file("templates/${templateId}.svg")
    getFutureEvents().each { event ->

      String eventId = calculateEventId(event)
      event.schedule.each { session ->
        if (session.type == 'speech') {

          String lvChars      = 'āēūīķņčžš'
          String replaceChars = 'aeuiknczs'

          String speakerId    = session.name.toLowerCase().trim().replaceAll('[\\s-]+', '_').tr(lvChars, replaceChars)

          logger.quiet "> Generating '${templateId}' for ${event.theme} (${eventId} / ${speakerId})"

          File svgFile        = file("${buildDir}/${eventId}.svg")
          def titleLines      = WordUtils.wrap(session.title, 35).readLines()
          svgFile.text        = replaceTextInSVG(
            svgTemplate.text, 
            [
              'event-title':          event.'short-theme' ?: event.theme,
              'speaker-name':         session.name.tr(lvChars, replaceChars),
              'session-title-line1':  titleLines.first(),
              'session-title-line2':  titleLines.size() > 1 ? titleLines.get(1) : '',
              'event-time':           session.time,
              'event-date':           event.date,
              'event-location':       event.venue,
            ]
          )
          svgFile.text        = replaceImageInSVG(
            svgFile.text, 
            'speaker-image',
            "http://latcraft.lv/${session.img}"
          )

          renderImage(
            svgFile, 
            file("${buildDir}/${templateId}"), 
            "${eventId}_${speakerId}"
          )

          svgFile.delete()

        }
      }
    }
  }
}

generateSpeakerCards.logging.captureStandardOutput LogLevel.INFO
generateSpeakerCards.logging.captureStandardError LogLevel.INFO
generateSpeakerCards.outputs.dir file("${buildDir}")


def wrapLines(String line) {
  line.each {
    
  }
}

def replaceTextInSVG(String svgText, Map binding) {
  def svg = new XmlSlurper().parseText(svgText)
  binding.each { key, value ->
    def element = svg.depthFirst().find { it.@id == key }
    if (element) {
      element.replaceBody(value)
    }
  }
  XmlUtil.serialize(svg)
}

def replaceImageInSVG(String svgText, String elementId, String url) {
  def svg = new XmlSlurper().parseText(svgText)
  def element = svg.depthFirst().find { it.@id == elementId }
  if (element) {
    element.@'xlink:href' = "data:image/png;base64,${new URL(url).bytes.encodeBase64().toString().toList().collate(76)*.join().join(' ')}".toString()
  }
  XmlUtil.serialize(svg)
}


def renderImage(File svgFile, File baseDir, String baseName) {
  baseDir.mkdirs()
  PNGTranscoder t = new PNGTranscoder()
  String svgURI = svgFile.toURL().toString()
  t.transcode(new TranscoderInput(svgURI), new TranscoderOutput(new FileOutputStream("${baseDir}/${baseName}.png")))
}

// TODO: implement task for updating GitHub data and adding new/missing images

task build(dependsOn: [generateEventCards, generateSpeakerCards])


