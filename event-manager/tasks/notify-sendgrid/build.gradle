
import groovyx.net.http.*
import groovyx.net.http.Method
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
  }
}

apply from: '../common-utils/data-clients.gradle'

ext {

  defaultSenderId = "37076"
  defaultListId = "362055"

  contactFile = file("${buildDir}/contacts.csv")

  sendgrid = { Method method, String path, jsonBody, Closure cl ->
    def http = new HTTPBuilder('https://api.sendgrid.com')
    http.ignoreSSLIssues()
    http.request(method, JSON) {
      headers.'Content-Type' = 'application/json'
      headers.'User-Agent' = 'Groovy HTTPBuilder'
      headers.'Authorization' = "Bearer ${latcraftSendGridApiKey}"
      uri.path = "${path}"
      uri.query = [ access_token: latcraftGitHubToken ]
      if (jsonBody) {
        logger.debug JsonOutput.prettyPrint(JsonOutput.toJson(jsonBody))
        body = jsonBody
      }
      response.success = { _, json ->
        if (cl) {
          cl(json)
        }
      }
      response.failure = { resp ->
        throw new GradleException("Error details: ${resp.statusLine.statusCode} : ${resp.statusLine.reasonPhrase} : ${resp?.entity?.content?.text}")
      }
    }
  }

  findCampaignIdByName = { String campaignName ->
    sendgrid(GET, '/v3/campaigns', [:]) { data ->
      data.campaigns.find { campaign -> campaign.name == campaignName }?.id
    }
  }

  updateCampaignContent = { String campaignName, Map content ->
    String campaignId = findCampaignIdByName(campaignName)
    if (campaignId) {
      return sendgrid(PATCH, "/v3/campaigns/${campaignId}", content) { data ->
        data.id
      }
    } else {
      return sendgrid(POST, "/v3/campaigns", content) { data ->
        data.id
      }
    }
  }

  findTemplateIdByName = { String templateName ->
    sendgrid(GET, '/v3/templates', [:]) { data ->
      data.templates.find { template -> template.name == templateName }?.id
    }
  }

  getTemplateVersionId = { String templateId ->
    sendgrid(GET, "/v3/templates/${templateId}", [:]) { data ->
      data.versions.find { templateVersion -> templateVersion.active == 1 }?.id
    }
  }

  updateTemplateContent = { String templateId, Map content ->
    String templateVersionId = getTemplateVersionId(templateId)
    if (templateVersionId) {
      sendgrid(PATCH, "/v3/templates/${templateId}/versions/${templateVersionId}", content) { data ->
        logger.debug data.toString()
      }
    } else {
      sendgrid(POST, "/v3/templates/${templateId}/versions", content) { data ->
        logger.debug data.toString()
      }
    }
  }

}

task extractContactsFromEventBrite(dependsOn: getEventBriteData) << {
  contactFile.withWriter { Writer writer ->
    writer << "company;email;first_name;last_name;name;job_title\n"
    def attendees = []
    getEventBriteEvents().findAll{ !it.name.text.toLowerCase().startsWith('devternity') }.each { eventBriteEvent ->
      logger.quiet "> Extracting attendees from: ${eventBriteEvent.name.text}"
      eventbrite(GET, "/v3/events/${eventBriteEvent.id}/attendees/", [:], 1) { data ->        
        attendees.addAll(data.attendees)
        for(int pageNumber = 1; pageNumber <= data.pagination.page_count; pageNumber++) {
          eventbrite(GET, "/v3/events/${eventBriteEvent.id}/attendees/", [:], pageNumber) { pageData ->
            attendees.addAll(pageData.attendees)
          }
        }
      }
    }
    def filteredAttendees = [:] as TreeMap
    attendees.each { attendee ->
      if (attendee.profile.email) {
        filteredAttendees.put(attendee.profile.email.toLowerCase(), attendee)
      }
    }
    filteredAttendees.values().each { attendee ->
      writer << "${attendee.profile.company ?: ''};${attendee.profile.email ?: ''};${attendee.profile.first_name ?: ''};${attendee.profile.last_name ?: ''};${attendee.profile.name ?: ''};${attendee.profile.job_title ?: ''};\n"
    }
  }
}


extractContactsFromEventBrite.outputs.file contactFile


task synchronizeContactList(dependsOn: extractContactsFromEventBrite) << {
  def fields = [ 'company', 'email', 'first_name', 'last_name', 'name', 'job_title' ]
  // TODO: ensure custom fields are created
  contactFile.readLines().drop(1).collate(1000).each { batch ->
    sendgrid(POST, "/v3/contactdb/recipients", batch.collect{ [ fields, it.split(';') ].transpose().collectEntries{ it } }) { data ->      
      logger.quiet "> Errors: ${data.error_count}"
      logger.quiet "> New contacts: ${data.new_count}"
      if (data.errors) {
        data.errors.each { error ->
          logger.quiet "> Error: ${error.message}"
        }
      }
      sendgrid(POST, "/v3/contactdb/lists/${defaultListId}/recipients", data.persisted_recipients) { listData ->
        logger.debug listData.toString()
      }
    }
  }
}


task generateCampaignTemplates(dependsOn: getMasterData) << {
  getEvents().each { event ->

    String eventId = calculateEventId(event)
    def binding = [ event: event ]    

    // Generate invitation template.
    File invitationTemplateFile = file('templates/invitation.html')
    File overridenInvitationTemplateFile = file("templates/invitation_${eventId}.html")
    def template = templateEngine.createTemplate(overridenInvitationTemplateFile.exists() ? overridenInvitationTemplateFile : invitationTemplateFile)
    file("${buildDir}/invitation_${eventId}.html").text = template.make(binding).toString()

  }
}


task synchronizeCampaigns(dependsOn: [ getMasterData, generateCampaignTemplates ]) << {
  getFutureEvents().each { event ->

    String eventId = calculateEventId(event)

    // Create invitation campaign.
    String invitationCampaignName = "LatCraft | ${event.theme} Invitation (${eventId})"
    String invitationCampaignId = updateCampaignContent(invitationCampaignName, [ 
      title: "Personal Invitation to \"Latcraft | ${event.theme}\"",
      subject: "Personal Invitation to \"Latcraft | ${event.theme}\"",
      sender_id: defaultSenderId,
      list_id: defaultListId,
      html_content: file("${buildDir}/invitation_${eventId}.html").text
    ])

  }
}


task startInvitionCampaign << {
  // TODO: start campaign

}

task build(dependsOn: [ synchronizeCampaigns, synchronizeContactList ])
