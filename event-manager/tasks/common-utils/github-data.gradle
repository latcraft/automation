
import groovyx.net.http.*
import groovyx.net.http.Method
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import java.security.MessageDigest
import java.text.SimpleDateFormat

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
  }
}

ext {

  eventFile = file("${buildDir}/events.json")

  timeZone = TimeZone.getTimeZone('Europe/Riga')
  gmt = TimeZone.getTimeZone("GMT")
  dateFormat = new SimpleDateFormat('d MMMM, yyyy')
  dateFormat.timeZone = timeZone
  isoDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss")
  isoDateFormat.timeZone = timeZone

  getEvents = { 
    new JsonSlurper().parse(eventFile)
  }

  getFutureEvents = {     
    new JsonSlurper().parse(eventFile).findAll { dateFormat.parse(it.date) > new Date() }
  }

  github = { Method method, String path, Map jsonBody, Closure cl ->
    def http = new HTTPBuilder('https://api.github.com')
    http.ignoreSSLIssues()
    http.request(method, JSON) {
      headers.'Content-Type' = 'application/json'
      headers.'Accept' = 'application/vnd.github.v3+json'
      headers.'User-Agent' = 'Groovy HTTPBuilder'
      uri.path = "${path}"
      uri.query = [ access_token: latcraftGitHubToken ]
      if (jsonBody) {
        logger.debug JsonOutput.prettyPrint(JsonOutput.toJson(jsonBody))
        body = jsonBody
      }
      response.success = { _, json ->
        if (cl) {
          cl(json)
        }
      }
      response.failure = { resp ->
        throw new GradleException("Error details: ${resp.statusLine.statusCode} : ${resp.statusLine.reasonPhrase} : ${resp?.entity?.content?.text}")
      }
    }
  }

  slack = {

  }

}

task getMasterData << {
  buildDir.mkdirs()
  eventFile.text = new URL(latcraftEventDataFile).text
}

task updateMasterData(dependsOn: getMasterData) << {
  String checksum = github(GET, '/repos/latcraft/website/contents/data/events.json', [:]) { data ->
    return data.sha
  }
  String content = eventFile.bytes.encodeBase64().toString() 
  github(PUT, '/repos/latcraft/website/contents/data/events.json', [
    message: "updating event data",
    committer: [
      name: "Latcraft Event Manager",
      email: "hello@latcraft.lv"
    ],                     
    content: content,
    sha: checksum
  ]) { data ->
    logger.debug data.toString()
  }
}

getMasterData.outputs.file eventFile

task clean(type: Delete) {
  delete buildDir
}

