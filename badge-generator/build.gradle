
import com.google.zxing.BarcodeFormat
import com.google.zxing.client.j2se.MatrixToImageWriter
import com.google.zxing.common.BitMatrix
import com.google.zxing.qrcode.QRCodeWriter
import com.google.zxing.EncodeHintType

import org.apache.batik.transcoder.image.JPEGTranscoder
import org.apache.batik.transcoder.TranscoderInput
import org.apache.batik.transcoder.TranscoderOutput

import groovy.util.XmlSlurper
import groovy.xml.XmlUtil


buildscript {
  repositories { mavenCentral() }
  dependencies {
    classpath 'com.google.zxing:core:3.2.0'
    classpath 'com.google.zxing:javase:3.2.0'
    classpath('batik:batik-transcoder:1.6-1') {
      exclude module: 'fop'
    }
    classpath 'xerces:xercesImpl:2.11.0'
  }
}


task generateBadges << {
  buildDir.mkdirs()
  File svgTemplate = file('badge_template.svg')
  forEachPerson { name, email, company, type ->
    logger.quiet "> Generating badge for ${name}"
    // TODO: Figure out what to do with Latvian names, our font does not support Latvian characters
    String baseName = name.toLowerCase().replaceAll('[\\s-]', '_')
    File svgBadgeFile = file("${buildDir}/${baseName}_badge.svg")    
    File qrFile = renderQRCodeImage(getBadgeUrl(name, email, company), buildDir, baseName)
    svgBadgeFile.text = modifySVG(svgTemplate.text, name, email, company, type, qrFile)
    qrFile.delete()
    renderBadgeImage(svgBadgeFile, buildDir, baseName)
    svgBadgeFile.delete()
  }
}

generateBadges.logging.captureStandardOutput LogLevel.INFO
generateBadges.logging.captureStandardError LogLevel.INFO


task clean(type: Delete) {
  delete buildDir
}


def modifySVG(String svgText, String name, String email, String company, String badgeType, File qrFile) {
  def svg = new XmlSlurper().parseText(svgText)
  svg.depthFirst().find { it.@id == 'badge-name' }.replaceBody name
  svg.depthFirst().find { it.@id == 'badge-company' }.replaceBody company
  svg.depthFirst().find { it.@id == 'badge-type' }.replaceBody badgeType
  svg.depthFirst().find { it.@id == 'badge-qr' }.@'xlink:href' = "data:image/png;base64,${qrFile.bytes.encodeBase64().toString().toList().collate(76)*.join().join(' ')}".toString()
  def color = badgeType.startsWith('S') ? '225500' : badgeType.startsWith('O') ? '800000' : '162D50'
  svg.depthFirst().find { it.@id == 'badge-color' }.@style = "fill:#${color};fill-opacity:1;fill-rule:evenodd;stroke:none".toString()
  XmlUtil.serialize(svg)
}


def renderBadgeImage(File svgFile, File baseDir, String baseName) {
  JPEGTranscoder t = new JPEGTranscoder()
  t.addTranscodingHint(JPEGTranscoder.KEY_QUALITY, new Float(1))
  String svgURI = svgFile.toURL().toString()
  t.transcode(new TranscoderInput(svgURI), new TranscoderOutput(new FileOutputStream("${baseDir}/${baseName}_badge.jpg")))
}


File renderQRCodeImage(content, baseDir, baseName, width = 111, height = 111) {
  File targetFile = file("${baseDir}/${baseName}_qr.png")
  def hints = new EnumMap<EncodeHintType, Object>(EncodeHintType)
  hints.put(EncodeHintType.CHARACTER_SET, "UTF-8")
  hints.put(EncodeHintType.MARGIN, 0)
  BitMatrix bitMatrix = new QRCodeWriter().encode(content, BarcodeFormat.QR_CODE, width, height, hints)
  MatrixToImageWriter.writeToFile(bitMatrix, "png", targetFile)
  targetFile
}


def getBadgeUrl(name, email, company) {
  "http://aws-day.latcraft.lv/people/${name}/${email}/${company}"
}


def forEachPerson(Closure cl) {
  def lines = file('data.csv').readLines().drop(1).collect { it.trim() }.findAll { it.contains(';') }
  lines.each { String line ->
    def fields = line.split(';')
    cl(fields[0], fields[1], fields[2], fields[3])
  }
}




